// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LargeArgContainer.proto

#ifndef PROTOBUF_LargeArgContainer_2eproto__INCLUDED
#define PROTOBUF_LargeArgContainer_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_LargeArgContainer_2eproto();
void protobuf_AssignDesc_LargeArgContainer_2eproto();
void protobuf_ShutdownFile_LargeArgContainer_2eproto();

class BasicArguments;
class LargeArgContainer;

// ===================================================================

class BasicArguments : public ::google::protobuf::MessageLite {
public:
    BasicArguments();
    virtual ~BasicArguments();

    BasicArguments(const BasicArguments& from);

    inline BasicArguments& operator=(const BasicArguments& from) {
        CopyFrom(from);
        return *this;
    }

    static const BasicArguments& default_instance();

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    // Returns the internal default instance pointer. This function can
    // return NULL thus should not be used by the user. This is intended
    // for Protobuf internal code. Please use default_instance() declared
    // above instead.
    static inline const BasicArguments* internal_default_instance() {
        return default_instance_;
    }
#endif

    void Swap(BasicArguments* other);

    // implements Message ----------------------------------------------

    BasicArguments* New() const;
    void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
    void CopyFrom(const BasicArguments& from);
    void MergeFrom(const BasicArguments& from);
    void Clear();
    bool IsInitialized() const;

    int ByteSize() const;
    bool MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input);
    void SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const;
    int GetCachedSize() const { return _cached_size_; }
private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const;
public:

    ::std::string GetTypeName() const;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // required string argType = 1;
    inline bool has_argtype() const;
    inline void clear_argtype();
    static const int kArgTypeFieldNumber = 1;
    inline const ::std::string& argtype() const;
    inline void set_argtype(const ::std::string& value);
    inline void set_argtype(const char* value);
    inline void set_argtype(const char* value, size_t size);
    inline ::std::string* mutable_argtype();
    inline ::std::string* release_argtype();
    inline void set_allocated_argtype(::std::string* argtype);

    // optional int32 identifier1 = 2;
    inline bool has_identifier1() const;
    inline void clear_identifier1();
    static const int kIdentifier1FieldNumber = 2;
    inline ::google::protobuf::int32 identifier1() const;
    inline void set_identifier1(::google::protobuf::int32 value);

    // optional int32 identifier2 = 3;
    inline bool has_identifier2() const;
    inline void clear_identifier2();
    static const int kIdentifier2FieldNumber = 3;
    inline ::google::protobuf::int32 identifier2() const;
    inline void set_identifier2(::google::protobuf::int32 value);

    // optional string longMessage = 4;
    inline bool has_longmessage() const;
    inline void clear_longmessage();
    static const int kLongMessageFieldNumber = 4;
    inline const ::std::string& longmessage() const;
    inline void set_longmessage(const ::std::string& value);
    inline void set_longmessage(const char* value);
    inline void set_longmessage(const char* value, size_t size);
    inline ::std::string* mutable_longmessage();
    inline ::std::string* release_longmessage();
    inline void set_allocated_longmessage(::std::string* longmessage);

    // @@protoc_insertion_point(class_scope:BasicArguments)
private:
    inline void set_has_argtype();
    inline void clear_has_argtype();
    inline void set_has_identifier1();
    inline void clear_has_identifier1();
    inline void set_has_identifier2();
    inline void clear_has_identifier2();
    inline void set_has_longmessage();
    inline void clear_has_longmessage();

    ::std::string* argtype_;
    ::google::protobuf::int32 identifier1_;
    ::google::protobuf::int32 identifier2_;
    ::std::string* longmessage_;

    mutable int _cached_size_;
    ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    friend void  protobuf_AddDesc_LargeArgContainer_2eproto_impl();
#else
    friend void  protobuf_AddDesc_LargeArgContainer_2eproto();
#endif
    friend void protobuf_AssignDesc_LargeArgContainer_2eproto();
    friend void protobuf_ShutdownFile_LargeArgContainer_2eproto();

    void InitAsDefaultInstance();
    static BasicArguments* default_instance_;
};
// -------------------------------------------------------------------

class LargeArgContainer : public ::google::protobuf::MessageLite {
public:
    LargeArgContainer();
    virtual ~LargeArgContainer();

    LargeArgContainer(const LargeArgContainer& from);

    inline LargeArgContainer& operator=(const LargeArgContainer& from) {
        CopyFrom(from);
        return *this;
    }

    static const LargeArgContainer& default_instance();

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    // Returns the internal default instance pointer. This function can
    // return NULL thus should not be used by the user. This is intended
    // for Protobuf internal code. Please use default_instance() declared
    // above instead.
    static inline const LargeArgContainer* internal_default_instance() {
        return default_instance_;
    }
#endif

    void Swap(LargeArgContainer* other);

    // implements Message ----------------------------------------------

    LargeArgContainer* New() const;
    void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
    void CopyFrom(const LargeArgContainer& from);
    void MergeFrom(const LargeArgContainer& from);
    void Clear();
    bool IsInitialized() const;

    int ByteSize() const;
    bool MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input);
    void SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const;
    int GetCachedSize() const { return _cached_size_; }
private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const;
public:

    ::std::string GetTypeName() const;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // required string functionToCall = 1;
    inline bool has_functiontocall() const;
    inline void clear_functiontocall();
    static const int kFunctionToCallFieldNumber = 1;
    inline const ::std::string& functiontocall() const;
    inline void set_functiontocall(const ::std::string& value);
    inline void set_functiontocall(const char* value);
    inline void set_functiontocall(const char* value, size_t size);
    inline ::std::string* mutable_functiontocall();
    inline ::std::string* release_functiontocall();
    inline void set_allocated_functiontocall(::std::string* functiontocall);

    // optional int32 invokeStamp = 2;
    inline bool has_invokestamp() const;
    inline void clear_invokestamp();
    static const int kInvokeStampFieldNumber = 2;
    inline ::google::protobuf::int32 invokestamp() const;
    inline void set_invokestamp(::google::protobuf::int32 value);

    // repeated .BasicArguments args = 3;
    inline int args_size() const;
    inline void clear_args();
    static const int kArgsFieldNumber = 3;
    inline const ::BasicArguments& args(int index) const;
    inline ::BasicArguments* mutable_args(int index);
    inline ::BasicArguments* add_args();
    inline const ::google::protobuf::RepeatedPtrField< ::BasicArguments >&
        args() const;
    inline ::google::protobuf::RepeatedPtrField< ::BasicArguments >*
        mutable_args();

    // @@protoc_insertion_point(class_scope:LargeArgContainer)
private:
    inline void set_has_functiontocall();
    inline void clear_has_functiontocall();
    inline void set_has_invokestamp();
    inline void clear_has_invokestamp();

    ::std::string* functiontocall_;
    ::google::protobuf::RepeatedPtrField< ::BasicArguments > args_;
    ::google::protobuf::int32 invokestamp_;

    mutable int _cached_size_;
    ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
    friend void  protobuf_AddDesc_LargeArgContainer_2eproto_impl();
#else
    friend void  protobuf_AddDesc_LargeArgContainer_2eproto();
#endif
    friend void protobuf_AssignDesc_LargeArgContainer_2eproto();
    friend void protobuf_ShutdownFile_LargeArgContainer_2eproto();

    void InitAsDefaultInstance();
    static LargeArgContainer* default_instance_;
};
// ===================================================================


// ===================================================================

// BasicArguments

// required string argType = 1;
inline bool BasicArguments::has_argtype() const {
    return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BasicArguments::set_has_argtype() {
    _has_bits_[0] |= 0x00000001u;
}
inline void BasicArguments::clear_has_argtype() {
    _has_bits_[0] &= ~0x00000001u;
}
inline void BasicArguments::clear_argtype() {
    if (argtype_ != &::google::protobuf::internal::kEmptyString) {
        argtype_->clear();
    }
    clear_has_argtype();
}
inline const ::std::string& BasicArguments::argtype() const {
    return *argtype_;
}
inline void BasicArguments::set_argtype(const ::std::string& value) {
    set_has_argtype();
    if (argtype_ == &::google::protobuf::internal::kEmptyString) {
        argtype_ = new ::std::string;
    }
    argtype_->assign(value);
}
inline void BasicArguments::set_argtype(const char* value) {
    set_has_argtype();
    if (argtype_ == &::google::protobuf::internal::kEmptyString) {
        argtype_ = new ::std::string;
    }
    argtype_->assign(value);
}
inline void BasicArguments::set_argtype(const char* value, size_t size) {
    set_has_argtype();
    if (argtype_ == &::google::protobuf::internal::kEmptyString) {
        argtype_ = new ::std::string;
    }
    argtype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BasicArguments::mutable_argtype() {
    set_has_argtype();
    if (argtype_ == &::google::protobuf::internal::kEmptyString) {
        argtype_ = new ::std::string;
    }
    return argtype_;
}
inline ::std::string* BasicArguments::release_argtype() {
    clear_has_argtype();
    if (argtype_ == &::google::protobuf::internal::kEmptyString) {
        return NULL;
    }
    else {
        ::std::string* temp = argtype_;
        argtype_ = const_cast<::std::string*>(&::google::protobuf::internal::kEmptyString);
        return temp;
    }
}
inline void BasicArguments::set_allocated_argtype(::std::string* argtype) {
    if (argtype_ != &::google::protobuf::internal::kEmptyString) {
        delete argtype_;
    }
    if (argtype) {
        set_has_argtype();
        argtype_ = argtype;
    }
    else {
        clear_has_argtype();
        argtype_ = const_cast<::std::string*>(&::google::protobuf::internal::kEmptyString);
    }
}

// optional int32 identifier1 = 2;
inline bool BasicArguments::has_identifier1() const {
    return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BasicArguments::set_has_identifier1() {
    _has_bits_[0] |= 0x00000002u;
}
inline void BasicArguments::clear_has_identifier1() {
    _has_bits_[0] &= ~0x00000002u;
}
inline void BasicArguments::clear_identifier1() {
    identifier1_ = 0;
    clear_has_identifier1();
}
inline ::google::protobuf::int32 BasicArguments::identifier1() const {
    return identifier1_;
}
inline void BasicArguments::set_identifier1(::google::protobuf::int32 value) {
    set_has_identifier1();
    identifier1_ = value;
}

// optional int32 identifier2 = 3;
inline bool BasicArguments::has_identifier2() const {
    return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BasicArguments::set_has_identifier2() {
    _has_bits_[0] |= 0x00000004u;
}
inline void BasicArguments::clear_has_identifier2() {
    _has_bits_[0] &= ~0x00000004u;
}
inline void BasicArguments::clear_identifier2() {
    identifier2_ = 0;
    clear_has_identifier2();
}
inline ::google::protobuf::int32 BasicArguments::identifier2() const {
    return identifier2_;
}
inline void BasicArguments::set_identifier2(::google::protobuf::int32 value) {
    set_has_identifier2();
    identifier2_ = value;
}

// optional string longMessage = 4;
inline bool BasicArguments::has_longmessage() const {
    return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BasicArguments::set_has_longmessage() {
    _has_bits_[0] |= 0x00000008u;
}
inline void BasicArguments::clear_has_longmessage() {
    _has_bits_[0] &= ~0x00000008u;
}
inline void BasicArguments::clear_longmessage() {
    if (longmessage_ != &::google::protobuf::internal::kEmptyString) {
        longmessage_->clear();
    }
    clear_has_longmessage();
}
inline const ::std::string& BasicArguments::longmessage() const {
    return *longmessage_;
}
inline void BasicArguments::set_longmessage(const ::std::string& value) {
    set_has_longmessage();
    if (longmessage_ == &::google::protobuf::internal::kEmptyString) {
        longmessage_ = new ::std::string;
    }
    longmessage_->assign(value);
}
inline void BasicArguments::set_longmessage(const char* value) {
    set_has_longmessage();
    if (longmessage_ == &::google::protobuf::internal::kEmptyString) {
        longmessage_ = new ::std::string;
    }
    longmessage_->assign(value);
}
inline void BasicArguments::set_longmessage(const char* value, size_t size) {
    set_has_longmessage();
    if (longmessage_ == &::google::protobuf::internal::kEmptyString) {
        longmessage_ = new ::std::string;
    }
    longmessage_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BasicArguments::mutable_longmessage() {
    set_has_longmessage();
    if (longmessage_ == &::google::protobuf::internal::kEmptyString) {
        longmessage_ = new ::std::string;
    }
    return longmessage_;
}
inline ::std::string* BasicArguments::release_longmessage() {
    clear_has_longmessage();
    if (longmessage_ == &::google::protobuf::internal::kEmptyString) {
        return NULL;
    }
    else {
        ::std::string* temp = longmessage_;
        longmessage_ = const_cast<::std::string*>(&::google::protobuf::internal::kEmptyString);
        return temp;
    }
}
inline void BasicArguments::set_allocated_longmessage(::std::string* longmessage) {
    if (longmessage_ != &::google::protobuf::internal::kEmptyString) {
        delete longmessage_;
    }
    if (longmessage) {
        set_has_longmessage();
        longmessage_ = longmessage;
    }
    else {
        clear_has_longmessage();
        longmessage_ = const_cast<::std::string*>(&::google::protobuf::internal::kEmptyString);
    }
}

// -------------------------------------------------------------------

// LargeArgContainer

// required string functionToCall = 1;
inline bool LargeArgContainer::has_functiontocall() const {
    return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LargeArgContainer::set_has_functiontocall() {
    _has_bits_[0] |= 0x00000001u;
}
inline void LargeArgContainer::clear_has_functiontocall() {
    _has_bits_[0] &= ~0x00000001u;
}
inline void LargeArgContainer::clear_functiontocall() {
    if (functiontocall_ != &::google::protobuf::internal::kEmptyString) {
        functiontocall_->clear();
    }
    clear_has_functiontocall();
}
inline const ::std::string& LargeArgContainer::functiontocall() const {
    return *functiontocall_;
}
inline void LargeArgContainer::set_functiontocall(const ::std::string& value) {
    set_has_functiontocall();
    if (functiontocall_ == &::google::protobuf::internal::kEmptyString) {
        functiontocall_ = new ::std::string;
    }
    functiontocall_->assign(value);
}
inline void LargeArgContainer::set_functiontocall(const char* value) {
    set_has_functiontocall();
    if (functiontocall_ == &::google::protobuf::internal::kEmptyString) {
        functiontocall_ = new ::std::string;
    }
    functiontocall_->assign(value);
}
inline void LargeArgContainer::set_functiontocall(const char* value, size_t size) {
    set_has_functiontocall();
    if (functiontocall_ == &::google::protobuf::internal::kEmptyString) {
        functiontocall_ = new ::std::string;
    }
    functiontocall_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LargeArgContainer::mutable_functiontocall() {
    set_has_functiontocall();
    if (functiontocall_ == &::google::protobuf::internal::kEmptyString) {
        functiontocall_ = new ::std::string;
    }
    return functiontocall_;
}
inline ::std::string* LargeArgContainer::release_functiontocall() {
    clear_has_functiontocall();
    if (functiontocall_ == &::google::protobuf::internal::kEmptyString) {
        return NULL;
    }
    else {
        ::std::string* temp = functiontocall_;
        functiontocall_ = const_cast<::std::string*>(&::google::protobuf::internal::kEmptyString);
        return temp;
    }
}
inline void LargeArgContainer::set_allocated_functiontocall(::std::string* functiontocall) {
    if (functiontocall_ != &::google::protobuf::internal::kEmptyString) {
        delete functiontocall_;
    }
    if (functiontocall) {
        set_has_functiontocall();
        functiontocall_ = functiontocall;
    }
    else {
        clear_has_functiontocall();
        functiontocall_ = const_cast<::std::string*>(&::google::protobuf::internal::kEmptyString);
    }
}

// optional int32 invokeStamp = 2;
inline bool LargeArgContainer::has_invokestamp() const {
    return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LargeArgContainer::set_has_invokestamp() {
    _has_bits_[0] |= 0x00000002u;
}
inline void LargeArgContainer::clear_has_invokestamp() {
    _has_bits_[0] &= ~0x00000002u;
}
inline void LargeArgContainer::clear_invokestamp() {
    invokestamp_ = 0;
    clear_has_invokestamp();
}
inline ::google::protobuf::int32 LargeArgContainer::invokestamp() const {
    return invokestamp_;
}
inline void LargeArgContainer::set_invokestamp(::google::protobuf::int32 value) {
    set_has_invokestamp();
    invokestamp_ = value;
}

// repeated .BasicArguments args = 3;
inline int LargeArgContainer::args_size() const {
    return args_.size();
}
inline void LargeArgContainer::clear_args() {
    args_.Clear();
}
inline const ::BasicArguments& LargeArgContainer::args(int index) const {
    return args_.Get(index);
}
inline ::BasicArguments* LargeArgContainer::mutable_args(int index) {
    return args_.Mutable(index);
}
inline ::BasicArguments* LargeArgContainer::add_args() {
    return args_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::BasicArguments >&
LargeArgContainer::args() const {
    return args_;
}
inline ::google::protobuf::RepeatedPtrField< ::BasicArguments >*
LargeArgContainer::mutable_args() {
    return &args_;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_LargeArgContainer_2eproto__INCLUDED
